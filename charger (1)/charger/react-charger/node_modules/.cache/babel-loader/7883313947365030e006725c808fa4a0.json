{"ast":null,"code":"var _jsxFileName = \"C:\\\\oamk\\\\web-frameworks\\\\charger\\\\react-charger\\\\src\\\\Components\\\\ProtectedRoute.js\";\nimport React from 'react';\nimport { Redirect, Route } from \"react-router-dom\";\nexport default function ProtectedRoute(props) {\n  let output = null;\n\n  if (props.isUserLogged) {\n    output = /*#__PURE__*/React.createElement(Route, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 14\n      }\n    }));\n  } else {\n    output = /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 14\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, output);\n}\n/*import React from 'react'\r\n// import Auth from './components/Auth';\r\nimport { Redirect, Route } from \"react-router-dom\";\r\n\r\nexport default function ProtectedRoute(props) {\r\n  const { isAuthenticated, ...rest } = props;\r\n  let output;\r\n\r\n  if(isAuthenticated)\r\n  {\r\n    output = <Route {...rest} />\r\n  }\r\n  else\r\n  {\r\n    output = <Redirect to='/' />;\r\n  }\r\n\r\n  return <React.Fragment>{ output }</React.Fragment> //eventuell rausnehmen aber sonst übernehmen\r\n}*/","map":{"version":3,"sources":["C:/oamk/web-frameworks/charger/react-charger/src/Components/ProtectedRoute.js"],"names":["React","Redirect","Route","ProtectedRoute","props","output","isUserLogged"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,kBAAhC;AAEA,eAAe,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAE5C,MAAIC,MAAM,GAAC,IAAX;;AAEA,MAAGD,KAAK,CAACE,YAAT,EACA;AACED,IAAAA,MAAM,gBAAG,oBAAC,KAAD,oBAAWD,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAT;AACD,GAHD,MAKA;AACEC,IAAAA,MAAM,gBAAG,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAT;AACD;;AAED,sBACE,0CACEA,MADF,CADF;AAKD;AAKD","sourcesContent":["import React from 'react'\r\nimport { Redirect, Route } from \"react-router-dom\";\r\n\r\nexport default function ProtectedRoute(props) {\r\n\r\n  let output=null;\r\n\r\n  if(props.isUserLogged)\r\n  {\r\n    output = <Route {...props} />\r\n  }\r\n  else\r\n  {\r\n    output = <Redirect to='/' />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n    { output }\r\n    </>\r\n  ) \r\n}\r\n\r\n\r\n\r\n\r\n/*import React from 'react'\r\n// import Auth from './components/Auth';\r\nimport { Redirect, Route } from \"react-router-dom\";\r\n\r\nexport default function ProtectedRoute(props) {\r\n  const { isAuthenticated, ...rest } = props;\r\n  let output;\r\n\r\n  if(isAuthenticated)\r\n  {\r\n    output = <Route {...rest} />\r\n  }\r\n  else\r\n  {\r\n    output = <Redirect to='/' />;\r\n  }\r\n\r\n  return <React.Fragment>{ output }</React.Fragment> //eventuell rausnehmen aber sonst übernehmen\r\n}*/"]},"metadata":{},"sourceType":"module"}